****************install kubectl*********************************
#Download the latest release with the command
   $ curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
#Validate the binary
   $ curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
#Validate the kubectl binary against the checksum file
   $ echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
#If valid, the output is --kubectl: OK
# Install kubectl
   $ sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
   $ kubectl version --client --output=(yaml,json,etc....)
################install minikube-debian#########################
# to add binaries 
#debian
   $ curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
             sudo dpkg -i minikube_latest_amd64.deb
#binary 
   $ curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
             sudo install minikube-linux-amd64 /usr/local/bin/minikube
   $ minikube start --vm-driver=none (to start minikube with no driver)
*****************install cri-dockered*****************************
#On Linux, you can use wget:
   $ wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.0/cri-dockerd-v0.2.0-linux-amd64.tar.gz
   $ tar xvf cri-dockerd-v0.2.0-linux-amd64.tar.gz
   $ sudo mv ./cri-dockerd /usr/local/bin/ 
   $ cri-dockerd --help
     You should see the help output explaining the flags you can use with the tool.
#Start the service on Linux
#Now you’ll need to configure systemd:
   $ wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
   $ wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
   $ sudo mv cri-docker.socket cri-docker.service /etc/systemd/system/
   $ sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
#start the service with cri-dockerd enabled:
   $ systemctl daemon-reload
   $ systemctl enable cri-docker.service
   $ systemctl enable --now cri-docker.socket
#You can verify that the service is running with:
   $ systemctl status cri-docker.socket
   
   
   ************************setting up High Availablity cluster/master and slave architechture ************************************
   ************* Install Kubernertes on Master Node *************
#Upgrade apt packages
   $ sudo apt-get update

#Install Docker Engine
   $ sudo apt-get install -y docker.io

#Install Support packages
   $ sudo apt-get install -y apt-transport-https curl

#Retrieve the key for the Kubernetes repo and add it to your key manager
   $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

#Add the kubernetes repo to your system
$ 
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

#Install the three pieces you’ll need, kubeadm, kubelet, and kubectl
   $ sudo apt-get update
   $ sudo apt-get install -y kubelet kubeadm kubectl
   $ sudo apt-mark hold kubelet kubeadm kubectl

#Create the actual cluster
   $ kubeadm init --pod-network-cidr=192.168.0.0/16

Note - Notedown the Command to join cluster

#Install the Calico network plugin
   $ kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

#Untaint the master so that it will be available for scheduling workloads
   $ kubectl taint nodes --all node-role.kubernetes.io/master-

#Get Cluster Nodes
   $ kubectl get nodes

************* Install & Configure Kubernertes Worker Node *************

#Upgrade apt packages
   $ sudo apt-get update

#Install Docker Engine
   $ sudo apt-get install -y docker.io

#Install Support packages
   $ sudo apt-get install -y apt-transport-https curl

#Retrieve the key for the Kubernetes repo and add it to your key manager
   $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

#Add the kubernetes repo to your system
   $ cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
     deb http://apt.kubernetes.io/ kubernetes-xenial main
     EOF

#Install the three pieces you’ll need, kubeadm, kubelet, and kubectl
   $ sudo apt-get update
   $ sudo apt-get install -y kubelet kubeadm kubectl
   $ sudo apt-mark hold kubelet kubeadm kubectl

#Join the Worker Nodes to the Cluster
#In the Control Plane Node, create the token and copy the kubeadm join command (NOTE:The join command can also be found in the output from kubeadm init command):
   $ kubeadm token create --print-join-command

#In both Worker Nodes, paste the kubeadm join command to join the cluster:
   $ sudo kubeadm join <join command from previous command>

#In the Control Plane Node, view cluster status (Note: You may have to wait a few moments to allow the cluster to become ready):
     *kubectl get nodes
